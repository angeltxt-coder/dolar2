"use server"

// Cliente para NewsAPI - Noticias reales de Argentina
export interface NoticiaReal {
  titulo: string
  descripcion: string
  url: string
  fuente: string
  fechaPublicacion: string
  imagen?: string
  categoria: string
  relevancia: number
}

const NEWS_API_KEY = "49b09a8f119647b5ad356526a3455eed"
const NEWS_API_BASE_URL = "https://newsapi.org/v2"

// Palabras clave para filtrar noticias econ√≥micas relevantes (m√°s amplio)
const KEYWORDS_ECONOMICOS = [
  "d√≥lar",
  "dolar",
  "peso",
  "econom√≠a",
  "economia",
  "inflaci√≥n",
  "inflacion",
  "bcra",
  "banco central",
  "milei",
  "caputo",
  "finanzas",
  "mercado",
  "tipo de cambio",
  "devaluaci√≥n",
  "devaluacion",
  "reservas",
  "fmi",
  "blue",
  "mep",
  "ccl",
  "cripto",
  "bitcoin",
  "inversi√≥n",
  "inversion",
  "precios",
  "salario",
  "sueldo",
  "trabajo",
  "empleo",
  "industria",
  "exportaci√≥n",
  "importaci√≥n",
  "comercio",
  "negocio",
  "empresa",
]

// Funci√≥n principal m√°s robusta
export async function obtenerNoticiasRelevantes(): Promise<NoticiaReal[]> {
  console.log("üîç Iniciando b√∫squeda de noticias...")

  try {
    // Primero intentar headlines de Argentina
    let noticias = await obtenerHeadlinesArgentina()

    if (noticias.length === 0) {
      console.log("‚ö†Ô∏è No se encontraron headlines, intentando b√∫squeda por keywords...")
      noticias = await obtenerNoticiasPorKeywords()
    }

    if (noticias.length === 0) {
      console.log("‚ö†Ô∏è No se encontraron noticias por keywords, intentando b√∫squeda general...")
      noticias = await obtenerNoticiasGenerales()
    }

    console.log(`‚úÖ Total de noticias encontradas: ${noticias.length}`)
    return noticias
  } catch (error) {
    console.error("‚ùå Error general:", error)
    return []
  }
}

// Funci√≥n para obtener headlines de Argentina
async function obtenerHeadlinesArgentina(): Promise<NoticiaReal[]> {
  try {
    console.log("üì∞ Obteniendo headlines de Argentina...")

    const url = `${NEWS_API_BASE_URL}/top-headlines?country=ar&apiKey=${NEWS_API_KEY}&pageSize=100`
    console.log("üåê URL:", url.replace(NEWS_API_KEY, "***"))

    const response = await fetch(url, {
      next: { revalidate: 1800 },
      headers: {
        "User-Agent": "DolarOficial/1.0",
      },
    })

    console.log("üì° Response status:", response.status)

    if (!response.ok) {
      const errorText = await response.text()
      console.error("‚ùå Error response:", errorText)
      throw new Error(`Error ${response.status}: ${errorText}`)
    }

    const data = await response.json()
    console.log("üìä API Response status:", data.status)
    console.log("üìä Total articles received:", data.totalResults)

    if (data.status !== "ok") {
      console.error("‚ùå API Error:", data.message)
      throw new Error(`API Error: ${data.message}`)
    }

    if (!data.articles || data.articles.length === 0) {
      console.log("‚ö†Ô∏è No articles in response")
      return []
    }

    // Procesar art√≠culos con filtrado m√°s permisivo
    const noticiasRelevantes = data.articles
      .filter((article: any) => {
        if (!article.title || !article.description || article.title === "[Removed]") {
          return false
        }

        // Filtrado m√°s permisivo - buscar cualquier palabra clave econ√≥mica
        const textoCompleto = `${article.title} ${article.description}`.toLowerCase()
        const esRelevante = KEYWORDS_ECONOMICOS.some((keyword) => textoCompleto.includes(keyword.toLowerCase()))

        if (esRelevante) {
          console.log("‚úÖ Noticia relevante encontrada:", article.title.substring(0, 50) + "...")
        }

        return esRelevante
      })
      .map((article: any) => ({
        titulo: article.title,
        descripcion: article.description || "Sin descripci√≥n disponible",
        url: article.url,
        fuente: article.source?.name || "Fuente desconocida",
        fechaPublicacion: article.publishedAt,
        imagen: article.urlToImage,
        categoria: determinarCategoria(article.title, article.description || ""),
        relevancia: calcularRelevancia(article.title, article.description || ""),
      }))
      .sort((a, b) => b.relevancia - a.relevancia)
      .slice(0, 10)

    console.log(`üìà Noticias relevantes filtradas: ${noticiasRelevantes.length}`)
    return noticiasRelevantes
  } catch (error) {
    console.error("‚ùå Error en headlines:", error)
    return []
  }
}

// Funci√≥n para buscar por palabras clave espec√≠ficas
async function obtenerNoticiasPorKeywords(): Promise<NoticiaReal[]> {
  try {
    console.log("üîç Buscando por palabras clave espec√≠ficas...")

    const keywords = ["d√≥lar", "econom√≠a argentina", "BCRA", "peso argentino"]
    const todasLasNoticias: any[] = []

    for (const keyword of keywords) {
      try {
        const url = `${NEWS_API_BASE_URL}/everything?q="${keyword}"&language=es&sortBy=publishedAt&apiKey=${NEWS_API_KEY}&pageSize=20`
        console.log(`üîç Buscando: "${keyword}"`)

        const response = await fetch(url, {
          next: { revalidate: 1800 },
        })

        if (response.ok) {
          const data = await response.json()
          if (data.status === "ok" && data.articles) {
            console.log(`‚úÖ Encontradas ${data.articles.length} noticias para "${keyword}"`)
            todasLasNoticias.push(...data.articles)
          }
        } else {
          console.log(`‚ö†Ô∏è Error buscando "${keyword}": ${response.status}`)
        }
      } catch (err) {
        console.error(`‚ùå Error con keyword "${keyword}":`, err)
      }
    }

    // Eliminar duplicados y procesar
    const noticiasUnicas = todasLasNoticias
      .filter((article, index, self) => index === self.findIndex((a) => a.title === article.title))
      .filter((article) => article.title && article.description && article.title !== "[Removed]")
      .map((article) => ({
        titulo: article.title,
        descripcion: article.description || "Sin descripci√≥n disponible",
        url: article.url,
        fuente: article.source?.name || "Fuente desconocida",
        fechaPublicacion: article.publishedAt,
        imagen: article.urlToImage,
        categoria: determinarCategoria(article.title, article.description || ""),
        relevancia: calcularRelevancia(article.title, article.description || ""),
      }))
      .sort((a, b) => b.relevancia - a.relevancia)
      .slice(0, 10)

    console.log(`üìà Noticias √∫nicas procesadas: ${noticiasUnicas.length}`)
    return noticiasUnicas
  } catch (error) {
    console.error("‚ùå Error en b√∫squeda por keywords:", error)
    return []
  }
}

// Funci√≥n de respaldo: noticias generales de Argentina
async function obtenerNoticiasGenerales(): Promise<NoticiaReal[]> {
  try {
    console.log("üì∞ Obteniendo noticias generales como respaldo...")

    const url = `${NEWS_API_BASE_URL}/top-headlines?country=ar&apiKey=${NEWS_API_KEY}&pageSize=50`

    const response = await fetch(url, {
      next: { revalidate: 1800 },
    })

    if (!response.ok) {
      throw new Error(`Error ${response.status}`)
    }

    const data = await response.json()

    if (data.status !== "ok" || !data.articles) {
      return []
    }

    // Tomar cualquier noticia v√°lida como respaldo
    const noticiasGenerales = data.articles
      .filter((article: any) => article.title && article.description && article.title !== "[Removed]")
      .slice(0, 8)
      .map((article: any) => ({
        titulo: article.title,
        descripcion: article.description,
        url: article.url,
        fuente: article.source?.name || "Fuente desconocida",
        fechaPublicacion: article.publishedAt,
        imagen: article.urlToImage,
        categoria: "General",
        relevancia: 1,
      }))

    console.log(`üìà Noticias generales como respaldo: ${noticiasGenerales.length}`)
    return noticiasGenerales
  } catch (error) {
    console.error("‚ùå Error en noticias generales:", error)
    return []
  }
}

// Funci√≥n para calcular relevancia (m√°s permisiva)
function calcularRelevancia(titulo: string, descripcion: string): number {
  let relevancia = 1 // Base m√≠nima
  const textoCompleto = `${titulo} ${descripcion}`.toLowerCase()

  // Palabras de alta relevancia
  const altaRelevancia = ["d√≥lar", "dolar", "bcra", "peso", "inflaci√≥n", "milei"]
  const mediaRelevancia = ["econom√≠a", "economia", "finanzas", "mercado"]

  altaRelevancia.forEach((palabra) => {
    if (textoCompleto.includes(palabra)) relevancia += 10
  })

  mediaRelevancia.forEach((palabra) => {
    if (textoCompleto.includes(palabra)) relevancia += 5
  })

  // Bonus especiales
  if (textoCompleto.includes("blue")) relevancia += 15
  if (textoCompleto.includes("oficial")) relevancia += 8

  return relevancia
}

// Funci√≥n para determinar categor√≠a
function determinarCategoria(titulo: string, descripcion: string): string {
  const textoCompleto = `${titulo} ${descripcion}`.toLowerCase()

  if (textoCompleto.includes("pol√≠tica") || textoCompleto.includes("milei") || textoCompleto.includes("gobierno")) {
    return "Pol√≠tica"
  }

  if (textoCompleto.includes("d√≥lar") || textoCompleto.includes("peso") || textoCompleto.includes("bcra")) {
    return "Econom√≠a"
  }

  if (textoCompleto.includes("mercado") || textoCompleto.includes("bolsa")) {
    return "Mercados"
  }

  return "General"
}

// Funci√≥n de test para verificar la API
export async function testearAPI(): Promise<{ success: boolean; message: string; data?: any }> {
  try {
    console.log("üß™ Testeando conexi√≥n con NewsAPI...")

    const url = `${NEWS_API_BASE_URL}/top-headlines?country=ar&apiKey=${NEWS_API_KEY}&pageSize=5`

    const response = await fetch(url)
    const data = await response.json()

    if (response.ok && data.status === "ok") {
      return {
        success: true,
        message: `API funcionando correctamente. ${data.totalResults} noticias disponibles.`,
        data: data,
      }
    } else {
      return {
        success: false,
        message: `Error de API: ${data.message || response.statusText}`,
        data: data,
      }
    }
  } catch (error) {
    return {
      success: false,
      message: `Error de conexi√≥n: ${error.message}`,
    }
  }
}
